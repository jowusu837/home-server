services:
  traefik:
    image: traefik:v2.10
    container_name: traefik
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/data:/data
      - ./traefik/config/traefik.yml:/traefik.yml:ro
      - ./traefik/config/config.yml:/config.yml:ro
      - ./traefik/certs:/certs
    networks:
      - traefik_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.rule=Host(`${TRAEFIK_DOMAIN:-gateway.lan}`)"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.middlewares.traefik-auth.basicauth.users=${TRAEFIK_DASHBOARD_AUTH}"
      - "traefik.http.routers.traefik.middlewares=traefik-auth"

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./portainer/data:/data
    networks:
      - traefik_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.entrypoints=websecure"
      - "traefik.http.routers.portainer.rule=Host(`${PORTAINER_DOMAIN:-portainer.lan}`)"
      - "traefik.http.routers.portainer.tls=true"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"

  cifs-manager:
    build: ./cifs-manager
    container_name: cifs-manager
    restart: unless-stopped
    volumes:
      - media:/media
    environment:
      - CIFS_SERVER=${CIFS_SERVER}
      - CIFS_MOUNT_POINT=${CIFS_MOUNT_POINT}
      - CIFS_USERNAME=${CIFS_USERNAME}
      - CIFS_PASSWORD=${CIFS_PASSWORD}
    healthcheck:
      test: ["CMD", "ls", "/media"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # emby:
  #   image: emby/embyserver:latest
  #   container_name: emby
  #   restart: unless-stopped
  #   ports:
  #     - "9096:8096"
  #   healthcheck:
  #     test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8096/emby/system/info/public"]
  #     interval: 15s
  #     timeout: 5s
  #     retries: 3
  #     start_period: 90s
  #   volumes:
  #     - ./emby/config:/config
  #     - ./emby/cache:/cache
  #     - ./iptv/playlists:/playlists:ro
  #     - media:/media:ro
  #   environment:
  #     - PUID=${PUID:-1000}
  #     - PGID=${PGID:-1000}
  #     - TZ=${TZ:-Africa/Accra}
  #     - EMBY_SERVER_HTTP_TIMEOUT=3600
  #     - EMBY_SERVER_HTTP_KEEP_ALIVE=true
  #     - EMBY_SERVER_HTTP_KEEP_ALIVE_TIMEOUT=3600
  #   depends_on:
  #     cifs-manager:
  #       condition: service_healthy
  #   networks:
  #     - traefik_network
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.emby.entrypoints=websecure"
  #     - "traefik.http.routers.emby.rule=Host(`${EMBY_DOMAIN:-emby.lan}`)"
  #     - "traefik.http.routers.emby.tls=true"
  #     - "traefik.http.services.emby.loadbalancer.server.port=8096"
  #     - "traefik.http.middlewares.emby-keepalive.headers.customrequestheaders.X-Forwarded-For=keep-alive"
  #     - "traefik.http.routers.emby.middlewares=emby-keepalive"

  jellyfin:
    image: jellyfin/jellyfin:latest
    container_name: jellyfin
    restart: unless-stopped
    ports:
      - "9097:8096"
    healthcheck:
      test: ["CMD", "curl", "-f", "-H", "Accept: application/json", "http://localhost:8096/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 90s
    volumes:
      - ./jellyfin/config:/config
      - ./jellyfin/cache:/cache
      - ./iptv/playlists:/playlists:ro
      - media:/media:ro
    environment:
      - PUID=${PUID:-1000}
      - PGID=${PGID:-1000}
      - TZ=${TZ:-Africa/Accra}
      - JELLYFIN_SERVER_HTTP_TIMEOUT=3600
      - JELLYFIN_SERVER_HTTP_KEEP_ALIVE=true
      - JELLYFIN_SERVER_HTTP_KEEP_ALIVE_TIMEOUT=3600
    depends_on:
      cifs-manager:
        condition: service_healthy
    networks:
      - traefik_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jellyfin.entrypoints=websecure"
      - "traefik.http.routers.jellyfin.rule=Host(`${JELLYFIN_DOMAIN:-jellyfin.lan}`)"
      - "traefik.http.routers.jellyfin.tls=true"
      - "traefik.http.services.jellyfin.loadbalancer.server.port=8096"
      - "traefik.http.middlewares.jellyfin-keepalive.headers.customrequestheaders.X-Forwarded-For=keep-alive"
      - "traefik.http.routers.jellyfin.middlewares=jellyfin-keepalive"

  jellyfin-tizen-installer:
    image: ghcr.io/georift/install-jellyfin-tizen:latest
    container_name: jellyfin-tizen-installer
    restart: "no"
    command: ${TV_IP} ${JELLYFIN_TIZEN_BUILD:-Jellyfin-TrueHD}
    networks:
      - traefik_network

  # emby-tizen-installer:
  #   image: vitalets/tizen-webos-sdk:latest
  #   container_name: emby-tizen-installer
  #   restart: "no"
  #   volumes:
  #     - ./emby-tizen:/app
  #     - emby-tizen-data:/home/developer
  #   environment:
  #     - TV_IP=${TV_IP}
  #   command: >
  #     bash -c "
  #       echo 'Downloading Emby Tizen package...' &&
  #       curl -L https://github.com/MediaBrowser/Emby.Releases/raw/master/tizen/tizen.zip -o /app/tizen.zip &&
  #       echo 'Extracting package...' &&
  #       unzip -o /app/tizen.zip -d /app &&
  #       echo 'Connecting to TV...' &&
  #       sdb connect $${TV_IP} &&
  #       echo 'Installing Emby...' &&
  #       sdb -s $${TV_IP}:26101 shell 0 pkgcmd -i -t tpk -p /app/userwidget/emby.tmg &&
  #       echo 'âœ… Emby has been successfully installed on your Samsung TV!'
  #     "
  #   networks:
  #     - traefik_network

  cert-manager:
    build:
      context: ./cert-manager
      dockerfile: Dockerfile
    container_name: cert-manager
    restart: unless-stopped
    volumes:
      - ./traefik/certs:/certs
    networks:
      - traefik_network
    labels:
      - "traefik.enable=false"

volumes:
  media:
    driver_opts:
      type: cifs
      o: username=${CIFS_USERNAME},password=${CIFS_PASSWORD},uid=${PUID:-1000},gid=${PGID:-1000},vers=3.0
      device: //${CIFS_SERVER}/${CIFS_MOUNT_POINT}
  emby-tizen-data:
    name: emby-tizen-data

networks:
  traefik_network:
    driver: bridge
